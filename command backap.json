{
  "create": { "file": { "name": "N" }, "folder": { "name": "N" } },
  "wails": {
    "build": "N",
    "dev": "N",
    "init": {
      "-n": {
        "nameProject": {
          "-t": {
            "react": "N",
            "https://github.com/LGiki/wails-template-nextjs": "N"
          }
        }
      }
    }
  },
  "exit": "N",
  "go": {
    "mod": { "init": { "example": "N" } },
    "run": "N",
    "build": "N",
    "get": "N"
  },
  "ls": { "a": "N" },
  "python": "N",
  "pyinstaller": "N",
  "cd": "N",
  "npx": {
    "create-react-app": { "my-app": "N" },
    "create-next-app": { "my-app": "N" }
  },
  "pip": {
    "install [Install packages.]": {
      "aiogram": "N",
      "aiohttp": "N",
      "aiosignal": "N",
      "annotated-types": "N",
      "appdirs": "N",
      "async-timeout": "N",
      "attrs": "N",
      "babel": "N",
      "beautifulsoup4": "N",
      "blis": "N",
      "bs4": "N",
      "catalogue": "N",
      "certifi": "N",
      "charset-normalizer": "N",
      "click": "N",
      "cloudpathlib": "N",
      "colorama": "N",
      "confection": "N",
      "cymem": "N",
      "dawg-python": "N",
      "docopt-ng": "N",
      "easygui": "N",
      "en-core-web-sm": "N",
      "frozendict": "N",
      "frozenlist": "N",
      "html5lib": "N",
      "idna": "N",
      "jinja2": "N",
      "joblib": "N",
      "keyboard": "N",
      "langcodes": "N",
      "lxml": "N",
      "magic-filter": "N",
      "markupsafe": "N",
      "multidict": "N",
      "multitasking": "N",
      "murmurhash": "N",
      "mysql-connector-python": "N",
      "numpy": "N",
      "openai": "N",
      "packaging": "N",
      "pandas": "N",
      "peewee": "N",
      "pillow": "N",
      "pip": "N",
      "playsound": "N",
      "preshed": "N",
      "prompt-toolkit": "N",
      "protobuf": "N",
      "psutil": "N",
      "pyaes": "N",
      "pydantic-core": "N",
      "pydantic": "N",
      "pygments": "N",
      "pymorphy3-dicts-ru": "N",
      "pymorphy3-dicts-uk": "N",
      "pymorphy3": "N",
      "pyperclip": "N",
      "pyrogram": "N",
      "pysocks": "N",
      "python-dateutil": "N",
      "python-dotenv": "N",
      "pytz": "N",
      "requests": "N",
      "scikit-learn": "N",
      "scipy": "N",
      "setuptools": "N",
      "six": "N",
      "smart-open": "N",
      "soupsieve": "N",
      "spacy-legacy": "N",
      "spacy-loggers": "N",
      "spacy": "N",
      "srsly": "N",
      "tgcrypto": "N",
      "thinc": "N",
      "threadpoolctl": "N",
      "tqdm": "N",
      "typer": "N",
      "typing-extensions": "N",
      "tzdata": "N",
      "uk-core-news-sm": "N",
      "urllib3": "N",
      "wasabi": "N",
      "wcwidth": "N",
      "weasel": "N",
      "webencodings": "N",
      "wheel": "N",
      "yarl": "N",
      "yfinance": "N",
      "-r [Install from the given requirements file. This option can be used multiple times.]": "N",
      "-c [Constrain versions using the given constraints file. This option can be used multiple times.]": "N",
      "--no-deps [Don't install package dependencies.]": "N",
      "--pre [Include pre-release and development versions. By default, pip only finds stable versions.]": "N",
      "-e [Install a project in editable mode (i.e. setuptools 'develop mode') from a local project path or a VCS url.]": "N",
      "--dry-run [Don't actually install anything, just print what would be. Can be used in combination with --ignore-installed to 'resolve' the requirements.]": "N",
      "-t [Install packages into <dir>. By default this will not replace existing files/folders in <dir>. Use --upgrade to replace existing packages in <dir> with new versions.]": "N",
      "--platform [Only use wheels compatible with <platform>. Defaults to the platform of the running system. Use this option multiple times to specify multiple platforms supported by the target interpreter.]": "N",
      "--python-version [The Python interpreter version to use for wheel and 'Requires-Python' compatibility checks. Defaults to a version derived from the running interpreter. The version can be specified using up to three dot-separated integers (e.g. '3' for 3.0.0, '3.7' for 3.7.0, or '3.7.3'). A major-minor version can also be given as a string without dots (e.g. '37' for 3.7.0).]": "N",
      "--implementation [Only use wheels compatible with Python implementation <implementation>, e.g. 'pp', 'jy', 'cp', or 'ip'. If not specified, then the current interpreter implementation is used. Use 'py' to force implementation-agnostic wheels.]": "N",
      "--abi [Only use wheels compatible with Python abi <abi>, e.g. 'pypy_41'. If not specified, then the current interpreter abi tag is used. Use this option multiple times to specify multiple abis supported by the target interpreter. Generally you will need to specify --implementation, --platform, and --python-version when using this option.]": "N",
      "--user [Install to the Python user install directory for your platform. Typically ~/.local/, or %APPDATA%Python on Windows. (See the Python documentation for site.USER_BASE for full details.)]": "N",
      "--root [Install everything relative to this alternate root directory.]": "N",
      "--prefix [Installation prefix where lib, bin and other top-level folders are placed. Note that the resulting installation may contain scripts and other resources which reference the Python interpreter of pip, and not that of '--prefix'. See also the '--python' option if the intention is to install packages into another (possibly pip-free) environment.]": "N",
      "--src [Directory to check out editable projects into. The default in a virtualenv is '<venv path>/src'. The default for global installs is '<current dir>/src'.]": "N",
      "-U [Upgrade all specified packages to the newest available version. The handling of dependencies depends on the upgrade-strategy used.]": "N",
      "--upgrade-strategy [Determines how dependency upgrading should be handled [default: only-if-needed]. 'eager' - dependencies are upgraded regardless of whether the currently installed version satisfies the requirements of the upgraded package(s). 'only-if-needed' - are upgraded only when they do not satisfy the requirements of the upgraded package(s).]": "N",
      "--force-reinstall [Reinstall all packages even if they are already up-to-date.]": "N",
      "-I [Ignore the installed packages, overwriting them. This can break your system if the existing package is of a different version or was installed with a different package manager!]": "N",
      "--ignore-requires-python [Ignore the Requires-Python information.]": "N",
      "--no-build-isolation [Disable isolation when building a modern source distribution. Build dependencies specified by PEP 518 must be already installed if this option is used.]": "N",
      "--use-pep517 [Use PEP 517 for building source distributions (use --no-use-pep517 to force legacy behaviour).]": "N",
      "--check-build-dependencies [Check the build dependencies when PEP517 is used.]": "N",
      "--break-system-packages [Allow pip to modify an EXTERNALLY-MANAGED Python installation]": "N",
      "-C [Configuration settings to be passed to the PEP 517 build backend. Settings take the form KEY=VALUE. Use multiple --config-settings options to pass multiple keys to the backend.]": "N",
      "--global-option [Extra global options to be supplied to the setup.py call before the install or bdist_wheel command.]": "N",
      "--compile [Compile Python source files to bytecode]": "N",
      "--no-compile [Do not compile Python source files to bytecode]": "N",
      "--no-warn-script-location [Do not warn when installing scripts outside PATH]": "N",
      "--no-warn-conflicts [Do not warn about broken dependencies]": "N",
      "--no-binary [Do not use binary packages. Can be supplied multiple times, and each time adds to the existing value. Accepts either ':all:' to disable all binary packages, ':none:' to empty the set (notice the colons), or one or more package names with commas between them (no colons). Note that some packages are tricky to compile and may fail to install when this option is used on them.]": "N",
      "--only-binary [Do not use source packages. Can be supplied multiple times, and each time adds to the existing value. Accepts either ':all:' to disable all source packages, ':none:' to empty the set, or one or more package names with commas between them. Packages without binary distributions will fail to install when this option is used on them.]": "N",
      "--prefer-binary [Prefer binary packages over source packages, even if the source packages are newer.]": "N",
      "--require-hashes [Require a hash to check each requirement against, for repeatable installs. This option is implied when any package in a requirements file has a --hash option.]": "N",
      "--progress-bar [Specify whether the progress bar should be used [on, off] (default: on)]": "N",
      "--root-user-action [Action if pip is run as a root user. By default, a warning message is shown.]": "N",
      "--report [Generate a JSON file describing what pip did to install the provided requirements. Can be used in combination with --dry-run and --ignore-installed to 'resolve' the requirements. When - is used as file name it writes to stdout. When writing to stdout, please combine with the --quiet option to avoid mixing pip logging output with JSON output.]": "N",
      "--no-clean [Don't clean up build directories.]": "N",
      "-i [Base URL of the Python Package Index (default https://pypi.org/simple). This should point to a repository compliant with PEP 503 (the simple repository API) or a local directory laid out in the same format]": "N",
      "--index-url [Base URL of the Python Package Index (default https://pypi.org/simple). This should point to a repository compliant with PEP 503 (the simple repository API) or a local directory laid out in the same format]": "N",
      "--extra-index-url [Extra URLs of package indexes to use in addition to --index-url. Should follow the same rules as --index-url]": "N",
      "--no-index [Ignore package index (only looking at --find-links URLs instead)]": "N",
      "-f [If a URL or path to an html file, then parse for links to archives such as sdist (.tar.gz) or wheel (.whl) files. If a local path or file:// URL that's a directory, then look for archives in the directory listing. Links to VCS project URLs are not supported]": "N",
      "--find-links [If a URL or path to an html file, then parse for links to archives such as sdist (.tar.gz) or wheel (.whl) files. If a local path or file:// URL that's a directory, then look for archives in the directory listing. Links to VCS project URLs are not supported]": "N"
    },
    "download [Download packages.]": {
      "-c [Constrain versions using the given constraints file. This option can be used multiple times.]": "N",
      "-r [Install from the given requirements file. This option can be used multiple times.]": "N",
      "--no-deps [Don't install package dependencies.]": "N",
      "--global-option [Extra global options to be supplied to the setup.py call before the install or bdist_wheel command.]": "N",
      "--no-binary [Do not use binary packages. Can be supplied multiple times, and each time adds to the existing value. Accepts either \":all:\" to disable all binary packages, \":none:\" to empty the set (notice the colons), or one or more package names with commas between them (no colons). Note that some packages are tricky to compile and may fail to install when this option is used on them.]": "N",
      "--only-binary [Do not use source packages. Can be supplied multiple times, and each time adds to the existing value. Accepts either \":all:\" to disable all source packages, \":none:\" to empty the set, or one or more package names with commas between them. Packages without binary distributions will fail to install when this option is used on them.]": "N",
      "--prefer-binary [Prefer binary packages over source packages, even if the source packages are newer.]": "N",
      "--src [Directory to check out editable projects into. The default in a virtualenv is \"<venv path>/src\". The default for global installs is \"<current dir>/src\".]": "N",
      "--pre [Include pre-release and development versions. By default, pip only finds stable versions.]": "N",
      "--require-hashes [Require a hash to check each requirement against, for repeatable installs. This option is implied when any package in a requirements file has a --hash option.]": "N",
      "--progress-bar [Specify whether the progress bar should be used [on, off] (default: on)]": "N",
      "--no-build-isolation [Disable isolation when building a modern source distribution. Build dependencies specified by PEP 518 must be already installed if this option is used.]": "N",
      "--use-pep517 [Use PEP 517 for building source distributions (use --no-use-pep517 to force legacy behaviour).]": "N",
      "--check-build-dependencies [Check the build dependencies when PEP517 is used.]": "N",
      "--ignore-requires-python [Ignore the Requires-Python information.]": "N",
      "-d [Download packages into <dir>.]": "N",
      "--platform [Only use wheels compatible with <platform>. Defaults to the platform of the running system. Use this option multiple times to specify multiple platforms supported by the target interpreter.]": "N",
      "--python-version [The Python interpreter version to use for wheel and \"Requires-Python\" compatibility checks. Defaults to a version derived from the running interpreter. The version can be specified using up to three dot-separated integers (e.g. \"3\" for 3.0.0, \"3.7\" for 3.7.0, or \"3.7.3\"). A major-minor version can also be given as a string without dots (e.g. \"37\" for 3.7.0).]": "N",
      "--implementation [Only use wheels compatible with Python implementation <implementation>, e.g. 'pp', 'jy', 'cp', or 'ip'. If not specified, then the current interpreter implementation is used. Use 'py' to force implementation-agnostic wheels.]": "N",
      "--abi [Only use wheels compatible with Python abi <abi>, e.g. 'pypy_41'. If not specified, then the current interpreter abi tag is used. Use this option multiple times to specify multiple abis supported by the target interpreter. Generally you will need to specify --implementation, --platform, and --python-version when using this option.]": "N",
      "--no-clean [Don't clean up build directories.]": "N",
      "-i [Base URL of the Python Package Index (default https://pypi.org/simple). This should point to a repository compliant with PEP 503 (the simple repository API) or a local directory laid out in the same format.]": "N",
      "--extra-index-url [Extra URLs of package indexes to use in addition to --index-url. Should follow the same rules as --index-url.]": "N",
      "--no-index [Ignore package index (only looking at --find-links URLs instead).]": "N",
      "-f [If a URL or path to an html file, then parse for links to archives such as sdist (.tar.gz) or wheel (.whl) files. If a local path or file:// URL that's a directory, then look for archives in the directory listing. Links to VCS project URLs are not supported.]": "N"
    },
    "uninstall [Uninstall packages.]": "python_library",
    "freeze [Output installed packages in requirements format.]": "N",
    "inspect [Inspect the python environment.]": "N",
    "list [List installed packages.]": "N",
    "show [Show information about installed packages.]": "N",
    "check [Verify installed packages have compatible dependencies.]": "N",
    "config [Manage local and global configuration.]": "N",
    "search [Search PyPI for packages.]": "N",
    "cache [Inspect and manage pip's wheel cache.]": "N",
    "index [Inspect information available from package indexes.]": "N",
    "wheel [Build wheels from your requirements.]": "N",
    "hash [Compute hashes of package archives.]": "N",
    "completion [A helper command used for command completion.]": "N",
    "debug [Show information useful for debugging.]": "N",
    "help [Show help for commands.]": "N",
    "-h [Show help.]": "N",
    "--debug [Let unhandled exceptions propagate outside the main subroutine, instead of logging them to stderr.]": "N",
    "--isolated [Run pip in an isolated mode, ignoring environment variables and user configuration.]": "N",
    "--require-virtualenv [Allow pip to only run in a virtual environment; exit with an error otherwise.]": "N",
    "--python [Run pip with the specified Python interpreter.]": "N",
    "-v [Give more output. Option is additive, and can be used up to 3 times.]": "N",
    "-V [Show version and exit.]": "N",
    "-q [Give less output. Option is additive, and can be used up to 3 times (corresponding to WARNING, ERROR, and CRITICAL logging levels).]": "N",
    "--log [Path to a verbose appending log.]": "N",
    "--no-input [Disable prompting for input.]": "N",
    "--keyring-provider [Enable the credential lookup via the keyring library if user input is allowed. Specify which mechanism to use [disabled, import, subprocess]. (default: disabled)]": "N",
    "--proxy [Specify a proxy in the form scheme://[user:passwd@]proxy.server:port.]": "N",
    "--retries [Maximum number of retries each connection should attempt (default 5 times).]": "N",
    "--timeout [Set the socket timeout (default 15 seconds).]": "N",
    "--exists-action [Default action when a path already exists: (s)witch, (i)gnore, (w)ipe, (b)ackup, (a)bort.]": "N",
    "--trusted-host [Mark this host or host:port pair as trusted, even though it does not have valid or any HTTPS.]": "N",
    "--cert [Path to PEM-encoded CA certificate bundle. If provided, overrides the default. See 'SSL Certificate Verification' in pip documentation for more information.]": "N",
    "--client-cert [Path to SSL client certificate, a single file containing the private key and the certificate in PEM format.]": "N",
    "--cache-dir [Store the cache data in <dir>.]": "N",
    "--no-cache-dir [Disable the cache.]": "N",
    "--disable-pip-version-check [Don't periodically check PyPI to determine whether a new version of pip is available for download. Implied with --no-index.]": "N",
    "--no-color [Suppress colored output.]": "N",
    "--no-python-version-warning [Silence deprecation warnings for upcoming unsupported Pythons.]": "N",
    "--use-feature [Enable new functionality, that may be backward incompatible.]": "N",
    "--use-deprecated [Enable deprecated functionality, that will be removed in the future.]": "N"
  },
  "mkdir": "N",
  "rmdir": { "/s /q": "N" },
  "echo '' > ": "N",
  "npm": {
    "run": { "start": "N", "build": "N", "dev": "N" },
    "install": {
      "sass": "N",
      "react-content-loader": "N",
      "@material-ui/core": "N",
      "react-lazy-load-image-component": "N",
      "@material-ui/icons": "N",
      "framer-motion": "N",
      "react-router-dom": "N",
      "react-router-dom@5": "N",
      "@reduxjs/toolkit": { "react-redux": { "redux": "N" } },
      "--legacy-peer-deps": {
        "sass": "N",
        "react-content-loader": "N",
        "@material-ui/core": "N",
        "@material-ui/icons": "N",
        "react-lazy-load-image-component": "N",
        "framer-motion": "N",
        "react-router-dom": "N",
        "react-router-dom@5": "N",
        "@reduxjs/toolkit": { "react-redux": { "redux": "N" } }
      },
      "--force": {
        "sass": "N",
        "react-content-loader": "N",
        "@material-ui/core": "N",
        "@material-ui/icons": "N",
        "react-lazy-load-image-component": "N",
        "framer-motion": "N",
        "react-router-dom": "N",
        "react-router-dom@5": "N",
        "@reduxjs/toolkit": { "react-redux": { "redux": "N" } }
      }
    }
  },
  "git": {
    "clone [Clone a repository into a new directory]": "N",
    "init [Create an empty Git repository or reinitialize an existing one]": "N",
    "add [Add file contents to the index]": { ".": "N" },
    "mv [Move or rename a file, a directory, or a symlink]": "N",
    "rm [Remove files from the working tree and from the index]": "N",
    "restore [Restore working tree files]": "N",
    "bisect [Use binary search to find the commit that introduced a bug]": "N",
    "diff [Show changes between commits, commit and working tree, etc]": "N",
    "grep [Print lines matching a pattern]": "N",
    "log [Show commit logs]": "N",
    "show [Show various types of objects]": "N",
    "rebase [Reapply commits on top of another base tip]": "N",
    "reset [Reset current HEAD to the specified state]": "N",
    "switch [Switch branches]": "N",
    "tag [Create, list, delete or verify a tag object signed with GPG]": "N",

    "commit [Record changes to the repository]": {
      "-m [commit message]": { "\"commitMassage\"": "N" },
      "-q [suppress summary after successful commit]": "N",
      "-v [show diff in commit message template]": "N",
      "-F [read message from file]": "N",
      "--author [override author for commit]": "N",
      "--date [override date for commit]": "N",
      "-c [reuse and edit message from specified commit]": "N",
      "-C [reuse message from specified commit]": "N",
      "--fixup [use autosquash formatted message to fixup or amend/reword specified commit]": "N",
      "--squash [use autosquash formatted message to squash specified commit]": "N",
      "--reset-author [the commit is authored by me now (used with -C/-c/--amend)]": "N",
      "--trailer [add custom trailer(s)]": "N",
      "-s [add a Signed-off-by trailer]": "N",
      "-t [use specified template file]": "N",
      "-e [force edit of commit]": "N",
      "--cleanup [how to strip spaces and #comments from message]": "N",
      "--status [include status in commit message template]": "N",
      "-S [GPG sign commit]": "N",
      "-a [commit all changed files]": "N",
      "-i [add specified files to index for commit]": "N",
      "--interactive [interactively add files]": "N",
      "-p [interactively add changes]": "N",
      "-o [commit only specified files]": "N",
      "-n [bypass pre-commit and commit-msg hooks]": "N",
      "--dry-run [show what would be committed]": "N",
      "--short [show status concisely]": "N",
      "--branch [show branch information]": "N",
      "--ahead-behind [compute full ahead/behind values]": "N",
      "--porcelain [machine-readable output]": "N",
      "--long [show status in long format (default)]": "N",
      "-z [terminate entries with NUL]": "N",
      "--amend [amend previous commit]": "N",
      "--no-post-rewrite [bypass post-rewrite hook]": "N",
      "-u [show untracked files, optional modes: all, normal, no. (Default: all)]": "N",
      "--pathspec-from-file [read pathspec from file]": "N",
      "--pathspec-file-nul [with --pathspec-from-file, pathspec elements are separated with NUL character]": "N"
    },
    "status [Show the working tree status]": "N",
    "branch [List, create, or delete branches]": "git_branch",
    "branch [List, create, or delete branches]_c_addon": {
      "-d": "N",
      "-D": "N",
      "-a": "N",
      "-m": "N",
      "c_all": "git_branch"
    },
    "push [Update remote refs along with associated objects]": "git_remote",
    "push [Update remote refs along with associated objects]_c_addon": {
      "c_all": "git_branch",
      "c_all_c_addon": { "--delete": "N", "c_all": "git_branch" }
    },
    "pull [Fetch from and integrate with another repository or a local branch]": "git_remote",
    "pull [Fetch from and integrate with another repository or a local branch]_c_addon": {
      "c_all": "git_branch"
    },
    "checkout": "git_branch",
    "checkout_c_addon": {
      "-b [create and checkout a new branch]": "N",
      "-B [create/reset and checkout a branch]": "N",
      "-l [create reflog for new branch]": "N",
      "--guess [second guess 'git checkout <no-such-branch>']": "N",
      "--overlay [use overlay mode (default)]": "N",
      "-q [suppress progress reporting]": "N",
      "--recurse-submodules [control recursive updating of submodules]": "N",
      "--progress [force progress reporting]": "N",
      "-m [perform a 3-way merge with the new branch]": "N",
      "--conflict [conflict style (merge, diff3, or zdiff3)]": "N",
      "-d [detach HEAD at named commit]": "N",
      "-t [set branch tracking configuration]": "N",
      "-f [force checkout (throw away local modifications)]": "N",
      "--orphan [new unparented branch]": "N",
      "--overwrite-ignore [update ignored files (default)]": "N",
      "--ignore-other-worktrees [do not check if another worktree is holding the given ref]": "N",
      "-2 [checkout our version for unmerged files]": "N",
      "-3 [checkout their version for unmerged files]": "N",
      "-p [select hunks interactively]": "N",
      "--ignore-skip-worktree-bits [do not limit pathspecs to sparse entries only]": "N",
      "--pathspec-from-file [read pathspec from file]": "N",
      "--pathspec-file-nul [with --pathspec-from-file, pathspec elements are separated with NUL character]": "N",
      "--quiet [suppress progress reporting]": "N",
      "--merge [perform a 3-way merge with the new branch]": "N",
      "--detach [detach HEAD at named commit]": "N",
      "--track [set branch tracking configuration]": "N",
      "--force [force checkout (throw away local modifications)]": "N",
      "--ours [checkout our version for unmerged files]": "N",
      "--theirs [checkout their version for unmerged files]": "N",
      "--patch [select hunks interactively]": "N",
      "c_all": { "name_branch": "N" }
    },
    "revert": "N",
    "remote": {
      "add": "git_remote",
      "add_c_addon": { "c_all": "git_repos_url" },
      "set-url": "git_remote",
      "set-url_c_addon": { "c_all": "git_repos_url" },
      "-v": "N"
    },
    "config": {
      "--global": {
        "user.name": { "\"YourName\"": "N" },
        "user.email": { "\"youremail@example.com\"": "N" },
        "user.username": { "\"username\"": "N" }
      }
    },
    "diff": "N",
    "fetch [Download objects and refs from another repository]": {
      "--dry-run": "N"
    },
    "merge [Join two or more development histories together]": "git_branch",
    "--help": "N"
  },
  "add": "N",
  "ng": { "new": { "my-app": "N" }, "serve": { "--open": "N" } },
  "addf": "N",
  "reload": "N"
}
